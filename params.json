{
  "name": "Thumbnail",
  "tagline": "Thumbnail for a given video using FFMpeg",
  "body": "# Thumbnail\r\n\r\n\r\n\r\n[Wiki on web](http://lakshmajim.github.io/Thumbnail/)\r\n\r\n>### INDEX\r\n\r\n|Index|Description|\r\n|---|---|\r\n|[What it is](https://github.com/lakshmajim/Thumbnail#what-it-is) |- Introduction|\r\n|[Installing FFMpeg](https://github.com/lakshmajim/Thumbnail#installing-dependency-software) |- Installing dependency software|\r\n|[Installation](https://github.com/lakshmajim/Thumbnail#installation) |- Installing Thumbnail package, Lararavel Integration|\r\n|[Docs](https://github.com/lakshmajim/Thumbnail#method)|- Methods and Description|\r\n|[Generating Thumbnail](https://github.com/lakshmajim/Thumbnail#genearting-thumbnail) |- Generateing thumbnail image with this package|\r\n|[Miscellaneous](https://github.com/lakshmajim/Thumbnail#miscellaneous) |- Miscellaneous content regarding method calls|\r\n|[Twilio](https://github.com/lakshmajim/Thumbnail#license) |- License Information|\r\n\r\n\r\n\r\n>### What it is\r\n\r\n - Generates Thumbnail (image) for a given video \r\n - This uses **FFMpeg**.\r\n\r\n>### Version\r\n\r\n1.0.0\r\n\r\n---\r\n>### Installing dependency software\r\n\r\nThis package relays on [FFMpeg](https://en.wikipedia.org/wiki/FFmpeg), A complete, cross-platform solution to record, convert and stream audio and video i.e, Multimedia .\r\n\r\n####Installing FFMpeg on Ubuntu\r\n\r\n- Add the mc3man ppa\r\n\r\n```bash\r\n    sudo add-apt-repository ppa:mc3man/trusty-media\r\n```\r\n        \r\n- Run following command to Update the package list. \r\n\r\n```bash\r\n    sudo apt-get update\r\n    sudo apt-get update sudo apt-get dist-upgrade\r\n```\r\n        \r\n- Now FFmpeg is available to be installed with **apt** , Run this command\r\n\r\n```terminal\r\n\tsudo apt-get install ffmpeg\r\n```\r\n\r\n\r\n####Installing FFMpeg on Windows\r\n\r\n Refer to the following links\r\n \r\n [WikiHow](http://www.wikihow.com/Install-FFmpeg-on-Windows) \r\n\r\n [AdapticeSolutions](http://adaptivesamples.com/how-to-install-ffmpeg-on-windows/)\r\n\r\n        \r\n---\r\n>### Installation\r\n\r\n- This package is available on packagist\r\n```bash\r\n    composer require lakshmajim/thumbnail\r\n```\r\n- Add the Service Provider to **providers** array\r\n```php\r\nLakshmajim\\Thumbnail\\ThumbnailServiceProvider::class,\r\n```\r\n- Add the Facade to **aliases** array\r\n```php\r\n'Thumbnail' => Lakshmajim\\Thumbnail\\Facade\\Thumbnail::class,\r\n```\r\n- Try updating the application with composer (dependencies)\r\n    ```bash\r\n    composer update\r\n    ```\r\n---\r\n\r\n>### Genearting Thumbnail\r\n\r\nThe following example illustrates the usage of Thumbnail package\r\n```php\r\n<?php \r\n\r\nnamespace Trending\\Http\\Controllers\\File;\r\n\r\nuse Carbon;\r\nuse Thumbnail;\r\nuse Illuminate\\Http\\Request;\r\nuse Trending\\Http\\Controllers\\Controller;\r\n\r\n\r\n/**\r\n * -----------------------------------------------------------------------------\r\n *   ThumbnailTest - a class illustarting the usage og Thumbnail package \r\n * -----------------------------------------------------------------------------\r\n * This class having the functionality to upload a video file \r\n * and generate corresponding thumbnail\r\n *\r\n * @since    1.0.0\r\n * @version  1.0.0\r\n * @author   lakshmajim \r\n */\r\nclass ThumbnailTest extends AnotherClass\r\n{\r\n\tpublic function testThumbnail()\r\n\t{\r\n\t\t// get file from input data\r\n\t\t$file             = $this->request->file('file');\r\n\r\n\t\t// get file type\r\n\t\t$extension_type   = $file->getClientMimeType();\r\n\t\t\r\n\t\t// set storage path to store the file (actual video)\r\n\t\t$destination_path = storage_path().'/uploads';\r\n\r\n\t\t// get file extension\r\n\t\t$extension        = $file->getClientOriginalExtension();\r\n\r\n\r\n\t\t$timestamp        = str_replace([' ', ':'], '-', Carbon::now()->toDateTimeString());\r\n\t\t$file_name        = $timestamp;\r\n\t\t\r\n\t\t$upload_status    = $file->move($destination_path, $file_name);\t        \r\n\r\n\t\tif($upload_status)\r\n\t\t{\r\n\t\t\t// file type is video\r\n\t\t\t// set storage path to store the file (image generated for a given video)\r\n\t\t\t$thumbnail_path   = storage_path().'/images';\r\n\r\n\t\t\t$video_path       = $destination_path.'/'.$file_name;\r\n\r\n\t\t\t// set thumbnail image name\r\n\t\t\t$thumbnail_image  = $fb_user_id.\".\".$timestamp.\".jpg\";\r\n\t\t\t\r\n\t\t\t// set the thumbnail image \"palyback\" video button\r\n\t\t\t$water_mark       = storage_path().'/watermark/p.png';\r\n\r\n\t\t\t// get video length and process it\r\n\t\t\t// assign the value to time_to_image (which will get screenshot of video at that specified seconds)\r\n\t\t\t$time_to_image    = floor(($data['video_length'])/2);\r\n\r\n\r\n\t\t\t$thumbnail_status = Thumbnail::getThumbnail($video_path,$thumbnail_path,$thumbnail_image,160,128,$time_to_image,$water_mark,true);\t\t\r\n\t\t\tif($thumbnail_status)\r\n\t\t\t{\r\n\t\t\t\techo \"Thumbnail generated\";\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\techo \"thumbnail generation has failed\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n// end of class ThumbnailTest\r\n// end of file ThumbnailTest.php  \r\n```\r\n\r\n---\r\n>### METHOD\r\n\r\n```php\r\n$thumbnail_status = Thumbnail::getThumbnail(<VIDEO_SOURCE_DIRECTORY>,<THUMBNAIL_STORAGE_DIRECTORY>,<THUMBNAIL_NAME>);\r\n```\r\n\r\n```php\r\n$thumbnail_status = Thumbnail::getThumbnail(<VIDEO_SOURCE_DIRECTORY>,<THUMBNAIL_STORAGE_DIRECTORY>,<THUMBNAIL_NAME>,<HEIGHT_OF_IMAGE>,<WIDTH_OF_IMAGE>,<TIME_TO_TAKE_SCREENSHOT>,<WATERMARK_SOURCE_PATH>,<WATER_MARK>);\r\n\r\n```\r\n\r\n| PARAMETER           | DESCRIPTION                             |FIELD |\r\n|:-------------- |:----------------------------------------|:---|\r\n|VIDEO_SOURCE_DIRECTORY |     Video resource source path i.e, the name of video along with location where video is present|mandatory| \r\n| THUMBNAIL_STORAGE_DIRECTORY|    The destination path to save the generated thumbnail image|mandatory|\r\n| THUMBNAIL_NAME | The name of Image for output|mandatory|\r\n|HEIGHT_OF_IMAGE           |The height of output image             |  optional|\r\n | WIDTH_OF_IMAGE|       The width of output image                 |  optional|\r\n| TIME_TO_TAKE_SCREENSHOT    |         Time to take screenshot of the video               | optional|\r\n| WATERMARK_SOURCE_PATH| The name of watermark or play button along with the storage path | optional|\r\n |WATER_MARK         |     if this value set to true then it inserts play button or watermark on thumbnail image| optional|\r\n|THUMBNAIL_IMAGE_WIDTH|The height of thumbnail image with watermark|mandatory|\r\n|THUMBNAIL_IMAGE_HEIGHT|The width of Thumbnail image with watermark |mandatory|\r\n\r\n**Note** The final output thumbnail image dimensions must be specified in **.env** file.\r\n```bash\r\nTHUMBNAIL_IMAGE_WIDTH  = 320\r\nTHUMBNAIL_IMAGE_HEIGHT = 240\r\n```\r\nThis ensures that all the generated thumbnails with watermarks are having fixed dimensions\r\n\r\n----\r\n>### MISCELLANEOUS\r\n\r\n- To generate the thumbnail image ( screen shot of video)\r\n```php\r\nThumbnail::getThumbnail($video_path,$thumbnail_path,$thumbnail_image,160,128,$time_to_image,$water_mark,false);\r\n```\r\n\r\n- To generate the thumbnail image with watermark (play button)\r\n```php\r\nThumbnail::getThumbnail($video_path,$thumbnail_path,$thumbnail_image,160,128,$time_to_image,$water_mark,true);\r\n```\r\n----\r\n>### LICENSE\r\n\r\n[MIT](https://opensource.org/licenses/MIT)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}